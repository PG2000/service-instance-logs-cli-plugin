// This file was generated by counterfeiter
package logclientfakes

import (
	"sync"

	"github.com/pivotal-cf/service-instance-logs-cli-plugin/logclient"
)

type FakeLogClientBuilder struct {
	EndpointStub        func(url string) logclient.LogClientBuilder
	endpointMutex       sync.RWMutex
	endpointArgsForCall []struct {
		url string
	}
	endpointReturns struct {
		result1 logclient.LogClientBuilder
	}
	endpointReturnsOnCall map[int]struct {
		result1 logclient.LogClientBuilder
	}
	InsecureSkipVerifyStub        func(skipVerify bool) logclient.LogClientBuilder
	insecureSkipVerifyMutex       sync.RWMutex
	insecureSkipVerifyArgsForCall []struct {
		skipVerify bool
	}
	insecureSkipVerifyReturns struct {
		result1 logclient.LogClientBuilder
	}
	insecureSkipVerifyReturnsOnCall map[int]struct {
		result1 logclient.LogClientBuilder
	}
	BuildStub        func() logclient.LogClient
	buildMutex       sync.RWMutex
	buildArgsForCall []struct{}
	buildReturns     struct {
		result1 logclient.LogClient
	}
	buildReturnsOnCall map[int]struct {
		result1 logclient.LogClient
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogClientBuilder) Endpoint(url string) logclient.LogClientBuilder {
	fake.endpointMutex.Lock()
	ret, specificReturn := fake.endpointReturnsOnCall[len(fake.endpointArgsForCall)]
	fake.endpointArgsForCall = append(fake.endpointArgsForCall, struct {
		url string
	}{url})
	fake.recordInvocation("Endpoint", []interface{}{url})
	fake.endpointMutex.Unlock()
	if fake.EndpointStub != nil {
		return fake.EndpointStub(url)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.endpointReturns.result1
}

func (fake *FakeLogClientBuilder) EndpointCallCount() int {
	fake.endpointMutex.RLock()
	defer fake.endpointMutex.RUnlock()
	return len(fake.endpointArgsForCall)
}

func (fake *FakeLogClientBuilder) EndpointArgsForCall(i int) string {
	fake.endpointMutex.RLock()
	defer fake.endpointMutex.RUnlock()
	return fake.endpointArgsForCall[i].url
}

func (fake *FakeLogClientBuilder) EndpointReturns(result1 logclient.LogClientBuilder) {
	fake.EndpointStub = nil
	fake.endpointReturns = struct {
		result1 logclient.LogClientBuilder
	}{result1}
}

func (fake *FakeLogClientBuilder) EndpointReturnsOnCall(i int, result1 logclient.LogClientBuilder) {
	fake.EndpointStub = nil
	if fake.endpointReturnsOnCall == nil {
		fake.endpointReturnsOnCall = make(map[int]struct {
			result1 logclient.LogClientBuilder
		})
	}
	fake.endpointReturnsOnCall[i] = struct {
		result1 logclient.LogClientBuilder
	}{result1}
}

func (fake *FakeLogClientBuilder) InsecureSkipVerify(skipVerify bool) logclient.LogClientBuilder {
	fake.insecureSkipVerifyMutex.Lock()
	ret, specificReturn := fake.insecureSkipVerifyReturnsOnCall[len(fake.insecureSkipVerifyArgsForCall)]
	fake.insecureSkipVerifyArgsForCall = append(fake.insecureSkipVerifyArgsForCall, struct {
		skipVerify bool
	}{skipVerify})
	fake.recordInvocation("InsecureSkipVerify", []interface{}{skipVerify})
	fake.insecureSkipVerifyMutex.Unlock()
	if fake.InsecureSkipVerifyStub != nil {
		return fake.InsecureSkipVerifyStub(skipVerify)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.insecureSkipVerifyReturns.result1
}

func (fake *FakeLogClientBuilder) InsecureSkipVerifyCallCount() int {
	fake.insecureSkipVerifyMutex.RLock()
	defer fake.insecureSkipVerifyMutex.RUnlock()
	return len(fake.insecureSkipVerifyArgsForCall)
}

func (fake *FakeLogClientBuilder) InsecureSkipVerifyArgsForCall(i int) bool {
	fake.insecureSkipVerifyMutex.RLock()
	defer fake.insecureSkipVerifyMutex.RUnlock()
	return fake.insecureSkipVerifyArgsForCall[i].skipVerify
}

func (fake *FakeLogClientBuilder) InsecureSkipVerifyReturns(result1 logclient.LogClientBuilder) {
	fake.InsecureSkipVerifyStub = nil
	fake.insecureSkipVerifyReturns = struct {
		result1 logclient.LogClientBuilder
	}{result1}
}

func (fake *FakeLogClientBuilder) InsecureSkipVerifyReturnsOnCall(i int, result1 logclient.LogClientBuilder) {
	fake.InsecureSkipVerifyStub = nil
	if fake.insecureSkipVerifyReturnsOnCall == nil {
		fake.insecureSkipVerifyReturnsOnCall = make(map[int]struct {
			result1 logclient.LogClientBuilder
		})
	}
	fake.insecureSkipVerifyReturnsOnCall[i] = struct {
		result1 logclient.LogClientBuilder
	}{result1}
}

func (fake *FakeLogClientBuilder) Build() logclient.LogClient {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct{}{})
	fake.recordInvocation("Build", []interface{}{})
	fake.buildMutex.Unlock()
	if fake.BuildStub != nil {
		return fake.BuildStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.buildReturns.result1
}

func (fake *FakeLogClientBuilder) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *FakeLogClientBuilder) BuildReturns(result1 logclient.LogClient) {
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 logclient.LogClient
	}{result1}
}

func (fake *FakeLogClientBuilder) BuildReturnsOnCall(i int, result1 logclient.LogClient) {
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 logclient.LogClient
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 logclient.LogClient
	}{result1}
}

func (fake *FakeLogClientBuilder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.endpointMutex.RLock()
	defer fake.endpointMutex.RUnlock()
	fake.insecureSkipVerifyMutex.RLock()
	defer fake.insecureSkipVerifyMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLogClientBuilder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ logclient.LogClientBuilder = new(FakeLogClientBuilder)
