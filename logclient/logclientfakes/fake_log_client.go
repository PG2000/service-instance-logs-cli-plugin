// This file was generated by counterfeiter
package logclientfakes

import (
	"sync"

	"github.com/pivotal-cf/service-instance-logs-cli-plugin/logclient"
)

type FakeLogClient struct {
	RecentLogsStub        func(serviceGUID string, authToken string) ([]string, error)
	recentLogsMutex       sync.RWMutex
	recentLogsArgsForCall []struct {
		serviceGUID string
		authToken   string
	}
	recentLogsReturns struct {
		result1 []string
		result2 error
	}
	recentLogsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	TailingLogsStub        func(serviceGUID string, authToken string) (<-chan string, <-chan error)
	tailingLogsMutex       sync.RWMutex
	tailingLogsArgsForCall []struct {
		serviceGUID string
		authToken   string
	}
	tailingLogsReturns struct {
		result1 <-chan string
		result2 <-chan error
	}
	tailingLogsReturnsOnCall map[int]struct {
		result1 <-chan string
		result2 <-chan error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogClient) RecentLogs(serviceGUID string, authToken string) ([]string, error) {
	fake.recentLogsMutex.Lock()
	ret, specificReturn := fake.recentLogsReturnsOnCall[len(fake.recentLogsArgsForCall)]
	fake.recentLogsArgsForCall = append(fake.recentLogsArgsForCall, struct {
		serviceGUID string
		authToken   string
	}{serviceGUID, authToken})
	fake.recordInvocation("RecentLogs", []interface{}{serviceGUID, authToken})
	fake.recentLogsMutex.Unlock()
	if fake.RecentLogsStub != nil {
		return fake.RecentLogsStub(serviceGUID, authToken)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.recentLogsReturns.result1, fake.recentLogsReturns.result2
}

func (fake *FakeLogClient) RecentLogsCallCount() int {
	fake.recentLogsMutex.RLock()
	defer fake.recentLogsMutex.RUnlock()
	return len(fake.recentLogsArgsForCall)
}

func (fake *FakeLogClient) RecentLogsArgsForCall(i int) (string, string) {
	fake.recentLogsMutex.RLock()
	defer fake.recentLogsMutex.RUnlock()
	return fake.recentLogsArgsForCall[i].serviceGUID, fake.recentLogsArgsForCall[i].authToken
}

func (fake *FakeLogClient) RecentLogsReturns(result1 []string, result2 error) {
	fake.RecentLogsStub = nil
	fake.recentLogsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeLogClient) RecentLogsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.RecentLogsStub = nil
	if fake.recentLogsReturnsOnCall == nil {
		fake.recentLogsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.recentLogsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeLogClient) TailingLogs(serviceGUID string, authToken string) (<-chan string, <-chan error) {
	fake.tailingLogsMutex.Lock()
	ret, specificReturn := fake.tailingLogsReturnsOnCall[len(fake.tailingLogsArgsForCall)]
	fake.tailingLogsArgsForCall = append(fake.tailingLogsArgsForCall, struct {
		serviceGUID string
		authToken   string
	}{serviceGUID, authToken})
	fake.recordInvocation("TailingLogs", []interface{}{serviceGUID, authToken})
	fake.tailingLogsMutex.Unlock()
	if fake.TailingLogsStub != nil {
		return fake.TailingLogsStub(serviceGUID, authToken)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.tailingLogsReturns.result1, fake.tailingLogsReturns.result2
}

func (fake *FakeLogClient) TailingLogsCallCount() int {
	fake.tailingLogsMutex.RLock()
	defer fake.tailingLogsMutex.RUnlock()
	return len(fake.tailingLogsArgsForCall)
}

func (fake *FakeLogClient) TailingLogsArgsForCall(i int) (string, string) {
	fake.tailingLogsMutex.RLock()
	defer fake.tailingLogsMutex.RUnlock()
	return fake.tailingLogsArgsForCall[i].serviceGUID, fake.tailingLogsArgsForCall[i].authToken
}

func (fake *FakeLogClient) TailingLogsReturns(result1 <-chan string, result2 <-chan error) {
	fake.TailingLogsStub = nil
	fake.tailingLogsReturns = struct {
		result1 <-chan string
		result2 <-chan error
	}{result1, result2}
}

func (fake *FakeLogClient) TailingLogsReturnsOnCall(i int, result1 <-chan string, result2 <-chan error) {
	fake.TailingLogsStub = nil
	if fake.tailingLogsReturnsOnCall == nil {
		fake.tailingLogsReturnsOnCall = make(map[int]struct {
			result1 <-chan string
			result2 <-chan error
		})
	}
	fake.tailingLogsReturnsOnCall[i] = struct {
		result1 <-chan string
		result2 <-chan error
	}{result1, result2}
}

func (fake *FakeLogClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.recentLogsMutex.RLock()
	defer fake.recentLogsMutex.RUnlock()
	fake.tailingLogsMutex.RLock()
	defer fake.tailingLogsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLogClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ logclient.LogClient = new(FakeLogClient)
